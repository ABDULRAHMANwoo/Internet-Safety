Aim:
To develop a Java application that implements a secure authentication system using hashed 
passwords with salting to enhance security.
Software & Tools Required:
 Java Development Kit (JDK)
 Java IDE (Eclipse, IntelliJ IDEA, VS Code)
 Java Cryptography API
 SQLite or MySQL for user data storage
Experiment Steps:
Step 1: Understanding Hashed Passwords with Salting
1. Hashing converts passwords into a fixed-length string, making it irreversible.
2. Salting adds a unique random value to each password before hashing to prevent attacks like 
rainbow table attacks.
3. Secure hashing algorithms like PBKDF2, bcrypt, or SHA-256 are used for password security.
Step 2: Implement Secure Password Hashing in Java
1. Create a Java class (PasswordHasher.java) for hashing and salting passwords:
import java.security.SecureRandom;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
public class PasswordHasher {
 private static final SecureRandom RANDOM = new SecureRandom();
 
 public static String generateSalt() {
 byte[] salt = new byte[16];
 RANDOM.nextBytes(salt);
 return Base64.getEncoder().encodeToString(salt);
 }
 public static String hashPassword(String password, String salt) throws 
NoSuchAlgorithmException {
 MessageDigest md = MessageDigest.getInstance("SHA-256");
 md.update(salt.getBytes());
 byte[] hashedPassword = md.digest(password.getBytes());
 return Base64.getEncoder().encodeToString(hashedPassword);
 }
}
Step 3: Implement User Authentication
1. Create a Java class (UserAuthentication.java) to register and authenticate users:
import java.util.HashMap;
public class UserAuthentication {
 private static HashMap<String, String[]> userDatabase = new 
HashMap<>();
 
 public static void registerUser(String username, String password) 
throws Exception {
 String salt = PasswordHasher.generateSalt();
 String hashedPassword = PasswordHasher.hashPassword(password, 
salt);
 userDatabase.put(username, new String[]{hashedPassword, salt});
 System.out.println("User registered successfully!");
 }
 
 public static boolean authenticateUser(String username, String 
password) throws Exception {
 if (userDatabase.containsKey(username)) {
 String[] storedData = userDatabase.get(username);
 String hashedPassword = PasswordHasher.hashPassword(password, 
storedData[1]);
 return storedData[0].equals(hashedPassword);
 }
 return false;
 }
 
 public static void main(String[] args) throws Exception {
 registerUser("user1", "securePassword");
 boolean isAuthenticated = authenticateUser("user1", 
"securePassword");
 System.out.println("Authentication success: " + isAuthenticated);
 }
}
Step 4: Compile and Run the Java Program
1. Compile the program:
javac PasswordHasher.java UserAuthentication.java
2. Run the program:
java UserAuthentication
3. Observe user registration and authentication in the console output.
Step 5: Enhance Security
1. Use PBKDF2 or bcrypt instead of SHA-256 for better security.
2. Store user credentials securely in a database instead of an in-memory HashMap.
3. Implement account lockout policies after multiple failed attempts.
Expected Outcome:
✅ The Java application successfully implements a secure authentication system using hashed 
passwords with salting, ensuring robust user security.
