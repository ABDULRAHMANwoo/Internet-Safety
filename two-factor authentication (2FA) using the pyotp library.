Aim: To implement two-factor authentication (2FA) using the pyotp library in Python, which 
generates time-based one-time passwords (TOTP) for added security.
Software & Tools Required:
 Python 3.x
 pyotp library (for generating OTPs)
 Text editor (VSCode, Sublime Text, etc.)
 Command line or terminal
Experiment Steps:
Step 1: Understanding Two-Factor Authentication (2FA)
Two-factor authentication (2FA) is a security process in which a user must provide two forms of 
identification to access an account:
1. Something you know: A password or PIN.
2. Something you have: A one-time password (OTP) generated by a system or an app.
In this experiment, we will implement 2FA using TOTP (Time-based One-Time Password), which 
is a common method where the OTP expires after a short period of time (usually 30 seconds).
Step 2: Installing the pyotp Library
pyotp is a Python library used for generating OTPs. Install it using pip:
pip install pyotp
Step 3: Writing the Python Script for 2FA
We will create a simple system where:
1. The server generates a shared secret.
2. The client generates an OTP based on that secret.
3. The server verifies the OTP submitted by the client within a time window.
Python Code (two_factor_auth.py):
import pyotp
import time
# Function to generate a secret key for 2FA
def generate_secret():
 # Generate a random secret for the user (this is shared between client and 
server)
 totp = pyotp.TOTP(pyotp.random_base32())
 secret = totp.secret
 print(f"Your secret key is: {secret}")
 return secret
# Function to generate OTP (this is typically done by the client)
def generate_otp(secret):
 totp = pyotp.TOTP(secret)
 otp = totp.now() # Generate a valid OTP based on the shared secret
 print(f"Generated OTP: {otp}")
 return otp
# Function to verify OTP (this is typically done by the server)
def verify_otp(secret, otp):
 totp = pyotp.TOTP(secret)
 if totp.verify(otp):
 print("OTP Verified Successfully!")
 else:
 print("Invalid OTP! Verification Failed.")
# Main function
def main():
 print("Two-Factor Authentication (2FA) Demo")
 # Step 1: Generate a secret (this would be shared between the server and the 
client)
 secret = generate_secret()
 # Step 2: Generate OTP (client generates OTP based on the shared secret)
 otp = generate_otp(secret)
 # Step 3: User enters the OTP (simulating client input here)
 entered_otp = input("Enter the OTP: ")
 # Step 4: Verify OTP (server verifies the OTP entered by the client)
 verify_otp(secret, entered_otp)
if __name__ == "__main__":
 main()
Step 4: Running the Program
1. Save the Python script as two_factor_auth.py.
2. Open your terminal or command prompt and navigate to the directory where the script is 
saved.
3. Run the script using the following command:
python two_factor_auth.py
4. The program will:
o Generate a secret key for the user.
o Generate a one-time password (OTP) based on the secret.
o Ask the user to enter the OTP.
o Verify the OTP entered by the user.
Step 5: Testing the 2FA System
 When you run the script, it will display the secret key.
 The server will generate an OTP using this secret key.
 You will be asked to input the OTP. If it matches the generated OTP, the authentication will be 
successful.
Step 6: Expiry of OTP
 The OTP expires every 30 seconds (the default time window for TOTP).
 If you wait too long before entering the OTP, it will be invalid and the server will reject it.
Expected Outcome:
 The script will generate a secret key and an OTP based on it.
 The OTP will expire after 30 seconds.
 The user will be prompted to input the OTP, and if the OTP is valid, they will be authenticated 
successfully.
