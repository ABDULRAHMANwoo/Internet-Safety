13. Implement AES encryption in a Java application to securely store and retrieve sensitive 
data.
Aim:
To develop a Java application that uses AES encryption to securely store and retrieve sensitive data.
Software & Tools Required:
 Java Development Kit (JDK)
 Java IDE (Eclipse, IntelliJ IDEA, VS Code)
 AES Encryption Library (Java Cryptography API)
Experiment Steps:
Step 1: Understanding AES Encryption
1. AES (Advanced Encryption Standard) is a symmetric encryption algorithm used for secure 
data storage.
2. It operates on blocks of data and supports key sizes of 128, 192, or 256 bits.
Step 2: Implement AES Encryption in Java
1. Create a Java class (AESEncryption.java) to handle encryption and decryption:
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
public class AESEncryption {
 private static final String AES_ALGORITHM = "AES";
 // Generate AES Secret Key
 public static SecretKey generateKey() throws Exception {
 KeyGenerator keyGenerator = 
KeyGenerator.getInstance(AES_ALGORITHM);
 keyGenerator.init(128); // AES key size
 return keyGenerator.generateKey();
 }
 // Encrypt data using AES
 public static String encrypt(String data, SecretKey key) throws 
Exception {
 Cipher cipher = Cipher.getInstance(AES_ALGORITHM);
 cipher.init(Cipher.ENCRYPT_MODE, key);
 byte[] encryptedBytes = cipher.doFinal(data.getBytes());
 return Base64.getEncoder().encodeToString(encryptedBytes);
 }
 // Decrypt data using AES
 public static String decrypt(String encryptedData, SecretKey key) 
throws Exception {
 Cipher cipher = Cipher.getInstance(AES_ALGORITHM);
 
 cipher.init(Cipher.DECRYPT_MODE, key);
 byte[] decryptedBytes = 
cipher.doFinal(Base64.getDecoder().decode(encryptedData));
 return new String(decryptedBytes);
 }
 public static void main(String[] args) throws Exception {
 SecretKey key = generateKey();
 String originalData = "SensitiveData123";
 
 String encryptedData = encrypt(originalData, key);
 System.out.println("Encrypted Data: " + encryptedData);
 
 String decryptedData = decrypt(encryptedData, key);
 System.out.println("Decrypted Data: " + decryptedData);
 }
}
Step 3: Compile and Run the Java Program
1. Compile the program:
javac AESEncryption.java
2. Run the program:
java AESEncryption
3. Observe the encrypted and decrypted outputs in the console.
Step 4: Store and Retrieve Encrypted Data Securely
1. Modify the program to store the encrypted data in a file or database.
2. Retrieve and decrypt data securely when needed.
Expected Outcome:
✅ The Java application successfully encrypts and decrypts sensitive data using AES, ensuring secure 
storage and retrieval.
