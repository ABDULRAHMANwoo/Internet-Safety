 Rail Fence Cipher Transposition Technique
AIM:
To implement a program for encryption and decryption using rail fence transposition
technique.
ALGORITHM:
1. In the rail fence cipher, the plaintext is written downwards and diagonally on successive 
"rails" of an imaginary fence, then moving up when we reach the bottom rail.
2. When we reach the top rail, the message is written downwards again until the whole 
plaintext is written out.
3. The message is then read off in rows.
PROGRAM:
railFenceCipher.java
classrailfenceCipherHelper
{
int depth;
String encode(String msg, int depth) throws Exception { int r = 
depth;
int l = msg.length(); int 
c = l / depth;
int k = 0;
char mat[][] = new char[r][c]; String enc 
= "";
for (int i = 0; i < c; i++) { for
(int j = 0; j < r; j++) {
if (k != l) {
mat[j][i] = msg.charAt(k++);
} else {
mat[j][i] = 'X';
}
}
}
for (int i = 0; i < r; i++) { for
(int j = 0; j < c; j++) {
enc += mat[i][j];
}
}
return enc;
}
String decode(String encmsg, int depth) throws Exception { int r = 
depth;
int l = encmsg.length(); int c 
= l / depth;
int k = 0;
char mat[][] = new char[r][c]; String dec 
= "";
for (int i = 0; i < r; i++) { for
(int j = 0; j < c; j++) {
mat[i][j] = encmsg.charAt(k++);
}
}
for (int i = 0; i < c; i++) { for
(int j = 0; j < r; j++) {
dec += mat[j][i];
}
}
return dec;
}
}
class railFenceCipher
{
public static void main(String[] args) throws java.lang.Exception { railfenceCipherHelper rf = 
new railfenceCipherHelper();
String msg, enc, dec;
msg = "Anna University, Chennai"; int 
depth = 2;
enc = rf.encode(msg, depth); dec = 
rf.decode(enc, depth);
System.out.println("Simulating Railfence Cipher\n --------------------------------------- ");
System.out.println("Input Message : " + msg); 
System.out.println("Encrypted Message : " + enc); 
System.out.printf("Decrypted Message : " + dec);
}
}
OUTPUT:
Simulating Railfence Cipher
Input Message : Anna University, Chennai Encrypted
Message : An nvriy hnanaUiest,Ceni Decrypted
Message : Anna University, Chennai
RESULT:
Thus the java program for Rail Fence Transposition Technique has been implemented and the 
output verified successfully.









27b). Row and Column Transformation Technique
AIM:
To implement a program for encryption and decryption by using row and column
transformation technique.
ALGORITHM:
1. Consider the plain text hello world, and let us apply the simple columnar 
transposition technique as shown below
h e l l
o w o r
l d
2. The plain text characters are placed horizontally and the cipher text is created 
with vertical format as: holewdlo lr.
3. Now, the receiver has to use the same table to decrypt the cipher text to plain text.
PROGRAM:
TransCipher.java
import java.util.*; class
TransCipher {
public static void main(String args[]) { Scanner sc = 
new Scanner(System.in); 
System.out.println("Enter the plain text"); String 
pl = sc.nextLine();
sc.close(); String
s = ""; int start = 
0;
for (int i = 0; i < pl.length(); i++) { if 
(pl.charAt(i) == ' ') {
s = s + pl.substring(start, i); start = 
i + 1;
}
}
s = s + pl.substring(start); 
System.out.print(s); System.out.println();
// end of space deletion
int k = s.length(); int 
l = 0;
int col = 4;
int row = s.length() / col;
char ch[][] = new char[row][col]; for (int 
i = 0; i < row; i++) {
for (int j = 0; j < col; j++) { if (l 
< k) {
ch[i][j] = s.charAt(l); l++;
} else {
ch[i][j] = '#';
}
}
}
// arranged in matrix
char trans[][] = new char[col][row]; for 
(int i = 0; i < row; i++) {
for (int j = 0; j < col; j++) { trans[j][i] 
= ch[i][j];
}
}
for (int i = 0; i < col; i++) { for (int
j = 0; j < row; j++) {
System.out.print(trans[i][j]);
}
}
// display 
System.out.println();
}
}
OUTPUT:
Enter the plain text 
Security Lab 
SecurityLab Sreictuy
RESULT:
Thus the java program for Row and Column Transposition Technique has been 
implemented and the output verified successfully.
