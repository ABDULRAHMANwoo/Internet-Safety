Aim:
To develop a Python script using the PyCryptodome library to encrypt and decrypt files before 
transferring them over FTP securely.
Software & Tools Required:
 Python 3.x installed on the system
 PyCryptodome library for encryption and decryption
 ftplib for FTP file transfer
 FTP server (vsftpd, FileZilla, or other FTP services)
 Text editor or IDE (VS Code, PyCharm, Nano, etc.)
Experiment Steps:
Step 1: Install Required Libraries
1. Open a terminal or command prompt.
2. Install PyCryptodome:
pip install pycryptodome
3. Verify the installation:
python3 -c "from Crypto.Cipher import AES; print('PyCryptodome installed 
successfully')"
Step 2: Implement File Encryption and Decryption
1. Create a Python script named encrypt_decrypt.py.
2. Write the following Python code:
from Crypto.Cipher import AES
import os
def pad(data):
 """Pads data to make it AES block size compliant."""
 return data + b" " * (16 - len(data) % 16)
def encrypt_file(input_file, output_file, key):
 """Encrypts a file using AES encryption."""
 cipher = AES.new(key, AES.MODE_ECB)
 with open(input_file, 'rb') as f:
 plaintext = f.read()
 ciphertext = cipher.encrypt(pad(plaintext))
 with open(output_file, 'wb') as f:
 f.write(ciphertext)
 print(f"File {input_file} encrypted successfully as {output_file}.")
def decrypt_file(input_file, output_file, key):
 """Decrypts a file using AES encryption."""
 cipher = AES.new(key, AES.MODE_ECB)
 with open(input_file, 'rb') as f:
 ciphertext = f.read()
 plaintext = cipher.decrypt(ciphertext).rstrip(b" ")
 with open(output_file, 'wb') as f:
 f.write(plaintext)
 print(f"File {input_file} decrypted successfully as {output_file}.")
# Example Usage
key = b"thisisaverysecurekey!"[:16] # Ensure 16 bytes long
# Encrypt: encrypt_file("sample.txt", "sample_encrypted.bin", key)
# Decrypt: decrypt_file("sample_encrypted.bin", "sample_decrypted.txt", key)
Step 3: Implement Secure File Transfer Over FTP
1. Create another Python script named ftp_transfer.py.
2. Write the following Python code:
from ftplib import FTP
import os
def upload_file(ftp_server, username, password, file_path):
 ftp = FTP(ftp_server)
 ftp.login(user=username, passwd=password)
 with open(file_path, 'rb') as f:
 ftp.storbinary(f'STOR {os.path.basename(file_path)}', f)
 ftp.quit()
 print(f"Encrypted file {file_path} uploaded successfully.")
def download_file(ftp_server, username, password, remote_filename, local_path):
 ftp = FTP(ftp_server)
 ftp.login(user=username, passwd=password)
 with open(local_path, 'wb') as f:
 ftp.retrbinary(f'RETR {remote_filename}', f.write)
 ftp.quit()
 print(f"Encrypted file {remote_filename} downloaded successfully.")
# Example Usage
# upload_file("ftp.example.com", "user", "password", "sample_encrypted.bin")
# download_file("ftp.example.com", "user", "password", "sample_encrypted.bin", 
"downloaded_encrypted.bin")
Step 4: Running the Scripts
1. Encrypt a file before FTP transfer:
python3 encrypt_decrypt.py # Modify script to call encrypt_file function
2. Upload the encrypted file to an FTP server:
python3 ftp_transfer.py # Modify script to call upload_file function
3. Download the encrypted file from FTP:
python3 ftp_transfer.py # Modify script to call download_file function
4. Decrypt the downloaded file:
python3 encrypt_decrypt.py # Modify script to call decrypt_file function
Expected Outcome:
✅ The script successfully encrypts a file before uploading it via FTP and decrypts it after 
downloading, ensuring secure data transmission.
