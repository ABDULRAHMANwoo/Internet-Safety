Aim: To develop a challenge-response authentication system using one-time passwords (OTP) and 
Python‟s secrets module for secure OTP generation.
Software & Tools Required:
 Python 3.x
 Text editor (VSCode, Sublime Text, etc.)
 Command line or terminal
Experiment Steps:
Step 1: Understanding Challenge-Response Authentication with OTP
Challenge-response authentication is a method where:
 The server sends a challenge (a random number or question) to the client.
 The client must respond correctly by providing the correct response (an OTP) generated using a 
secret key and challenge.
In this experiment, the OTP (One-Time Password) will be generated using Python's secrets
module, which provides a secure way to generate cryptographically strong random numbers suitable 
for cryptographic applications.
Step 2: Installing Required Libraries
The secrets module is built into Python‟s standard library (Python 3.6+), so no additional 
installation is required.
Step 3: Writing the Python Script for OTP-Based Challenge-Response Authentication
In this script:
1. The server generates a challenge (random string or number).
2. The server then generates an OTP using the challenge and a secret key.
3. The client receives the challenge and responds with the OTP.
4. The server verifies the OTP and provides access if correct.
Python Code (otp_challenge_response.py):
import secrets
import time
# Secret key for OTP generation (in real-world applications, this should be 
securely stored)
SECRET_KEY = "SuperSecretKey"
# Function to generate a one-time password (OTP) based on a secret key and 
challenge
def generate_otp(challenge, secret_key):
 # Combine the challenge and secret key to generate a secure OTP
 otp_input = challenge + secret_key
 otp = secrets.token_hex(4) # Generate a 4-byte OTP (8 hex characters)
 return otp
# Server-side function to generate the challenge and OTP
def server_generate_challenge():
 challenge = secrets.token_hex(4) # Generate a random challenge (4-byte 
random string)
 otp = generate_otp(challenge, SECRET_KEY)
 return challenge, otp
# Client-side function to respond with OTP
def client_respond(challenge, otp):
 # The client would typically generate the OTP based on the secret key and 
challenge
 # Here, for simplicity, we're directly passing the correct OTP
 return otp
# Function to simulate the challenge-response authentication process
def authenticate_user():
 print("Welcome to the Secure OTP Authentication System!")
 
 # Server generates a challenge and OTP
 challenge, correct_otp = server_generate_challenge()
 
 # Server displays the challenge (this would be shown to the client)
 print(f"Challenge: {challenge}")
 
 # Simulating the client receiving the challenge and generating the response 
(OTP)
 client_otp = client_respond(challenge, correct_otp)
 
 # Server verifies the client's response
 if client_otp == correct_otp:
 print("Authentication Successful!")
 else:
 print("Authentication Failed!")
# Main function
if __name__ == "__main__":
 authenticate_user()
Step 4: Running the Program
1. Save the Python script as otp_challenge_response.py.
2. Open your terminal or command prompt and navigate to the directory where the script is 
saved.
3. Run the script using the following command:
python otp_challenge_response.py
4. The program will generate a challenge, create an OTP, and then simulate the authentication 
process by verifying the OTP provided by the client.
Step 5: Testing the Authentication System
 The server generates a random challenge and an OTP.
 The client (simulated here) sends back the correct OTP.
 The server verifies the OTP and prints whether authentication was successful or failed.
Step 6: Enhancing the OTP System
 Time-based OTPs (TOTP): You can enhance this system by adding time-based OTPs using the current 
timestamp as part of the OTP generation.
 OTP Expiry: Implement OTP expiration by checking the time when the OTP was generated.
 Secure Storage: In a real-world system, store the secret key securely (using secure storage 
techniques or databases).
Expected Outcome:
 The program successfully generates a random challenge and OTP.
 The server successfully verifies the OTP provided by the client.
 The authentication process is simulated, and authentication results are printed (either successful or 
failed).
