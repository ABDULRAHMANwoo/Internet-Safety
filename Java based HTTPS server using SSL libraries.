Aim:
To develop a secure HTTPS server in Java using SSL/TLS encryption for secure client-server 
communication.
Software & Tools Required:
 Java Development Kit (JDK)
 OpenSSL (for generating SSL certificates)
 Java IDE (Eclipse, IntelliJ IDEA, VS Code)
 Web browser or cURL for testing
Experiment Steps:
Step 1: Generate an SSL Certificate
1. Open a terminal and generate a self-signed SSL certificate using Java‟s keytool:
keytool -genkeypair -alias myhttpsserver -keyalg RSA -keystore 
keystore.jks -validity 365 -storepass password
2. When prompted, enter details such as name, organization, and location.
Step 2: Create a Java HTTPS Server
1. Create a Java class (HttpsServerExample.java) to set up the server:
import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpsConfigurator;
import com.sun.net.httpserver.HttpsServer;
import javax.net.ssl.*;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.security.KeyStore;
import java.io.FileInputStream;
public class HttpsServerExample {
 public static void main(String[] args) throws Exception {
 // Load the keystore
 char[] password = "password".toCharArray();
 KeyStore ks = KeyStore.getInstance("JKS");
 FileInputStream fis = new FileInputStream("keystore.jks");
 ks.load(fis, password);
 // Set up the KeyManager
 KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
 kmf.init(ks, password);
 // Set up the SSL context
 SSLContext sslContext = SSLContext.getInstance("TLS");
 
 sslContext.init(kmf.getKeyManagers(), null, null);
 // Create HTTPS server
 HttpsServer server = HttpsServer.create(new 
InetSocketAddress(8443), 0);
 server.setHttpsConfigurator(new HttpsConfigurator(sslContext));
 server.createContext("/test", exchange -> {
 String response = "Hello, Secure World!";
 exchange.sendResponseHeaders(200, response.length());
 OutputStream os = exchange.getResponseBody();
 os.write(response.getBytes());
 os.close();
 });
 server.setExecutor(null);
 server.start();
 System.out.println("HTTPS server started on port 8443");
 }
}
Step 3: Run the HTTPS Server
1. Compile and run the Java program:
2. javac HttpsServerExample.java
java HttpsServerExample
3. The server will start on port 8443.
Step 4: Test the Server
1. Open a web browser and navigate to:
https://localhost:8443/test
2. Alternatively, use cURL:
curl -k https://localhost:8443/test
3. Verify that the response is Hello, Secure World!.
Expected Outcome:
✅ The Java-based HTTPS server successfully encrypts client-server communication using SSL/TLS, 
ensuring secure data transmission.
